<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Zygote、System进程启动</title>
      <link href="/2018/10/19/Zygote%E3%80%81System%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/"/>
      <url>/2018/10/19/Zygote%E3%80%81System%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Zygote，翻译为中文是“受精卵”，它是Android系统中，所有Java进程的父进程，负责创建新进程。System进程，是Android系统中系统服务运行所在的进程，它负责创建、管理所有的系统服务，包括AMS、PackageManagerServer等等十分重要的服务，都运行在System进程中。</p><p>Zygote和System进程的生命周期伴随整个系统，在系统启动时就会启动这两个进程，而直到系统关闭，它们才会被杀死。</p><p>值得一提的是，在Android5.0之后，Zygote进程在系统中一共存在两个，这主要是为了适应新增加的64位app而设计的，它们两个的主要功能其实是一致的。</p><p>And，System进程其实也是Zygote进程的子进程，它们启动的顺序大概可以描述为，Linux系统的初始化进程<init>通过读取脚本，创建Zygote，Zygote创建完成之后，先启动了System进程，然后自己再等待其他创建请求。</init></p><p>本文以API28的源码为基础进行分析。</p><hr><h2 id="Zygote启动过程"><a href="#Zygote启动过程" class="headerlink" title="Zygote启动过程"></a>Zygote启动过程</h2><h3 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h3><ol><li>init进程加载脚本，启动app_process文件中的main函数</li></ol><ol start="2"><li>创建虚拟机实例，进入ZygoteInit类的main方法中</li></ol><ol start="3"><li>创建一个Socket</li></ol><ol start="4"><li>fork出System进程</li></ol><ol start="5"><li>自己进入死循环中，不断从第3步创建的Socket中获取是否有创建进程的请求，并进行处理。</li></ol><hr><h3 id="Step1-app-main-main"><a href="#Step1-app-main-main" class="headerlink" title="Step1: app_main.main"></a>Step1: app_main.main</h3><p><strong>frameworks/base/cmds/app_process/app_main.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function">AppRuntime <span class="title">runtime</span><span class="params">(argv[<span class="number">0</span>], computeArgBlockSize(argc, argv))</span></span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">bool</span> zygote = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> startSystemServer = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> application = <span class="literal">false</span>;</span><br><span class="line">    String8 niceName;</span><br><span class="line">    String8 className;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; argc) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* arg = argv[i++];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">"--zygote"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            zygote = <span class="literal">true</span>;</span><br><span class="line">            niceName = ZYGOTE_NICE_NAME;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">"--start-system-server"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            startSystemServer = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">"--application"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            application = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(arg, <span class="string">"--nice-name="</span>, <span class="number">12</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            niceName.setTo(arg + <span class="number">12</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(arg, <span class="string">"--"</span>, <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            className.setTo(arg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.ZygoteInit"</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.RuntimeInit"</span>, args, zygote);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>走这个方法的目的是解析启动脚本中传进来的参数并真正调用方法启动进程。</p><ol><li>创建一个AppRuntime对象，是AndroidRuntime的子类，它的定义就在app_main文件中。</li></ol><ol start="2"><li>做一些解析工作，解析从启动脚本传过来的参数，这里要启动的是zygote进程，所以zygote变量为true。</li></ol><ol start="3"><li>调用runtime的start方法，runtime就是第一步创建的AppRuntime对象，但是它没有重写start方法，start方法是在它的父类AndroidRuntime中的。注意：传入的参数是ZygoteInit类的全名以及要传给这个类的参数，以及最后一个判断启动的是否是zygote进程的bool值。</li></ol><hr><h3 id="Step2-AndroidRuntime-start"><a href="#Step2-AndroidRuntime-start" class="headerlink" title="Step2: AndroidRuntime.start"></a>Step2: AndroidRuntime.start</h3><p><strong>frameworks/base/core/jni/AndroidRuntime.cpp</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> AndroidRuntime::start(<span class="keyword">const</span> <span class="keyword">char</span>* className, <span class="keyword">const</span> Vector&lt;String8&gt;&amp; options, <span class="keyword">bool</span> zygote)</span><br><span class="line">&#123;</span><br><span class="line">    jni_invocation.Init(<span class="literal">NULL</span>);</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    <span class="keyword">if</span> (startVm(&amp;mJavaVM, &amp;env, zygote) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (startReg(env) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"Unable to register all android natives\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    。。。</span><br><span class="line">    <span class="keyword">char</span>* slashClassName = toSlashClassName(className != <span class="literal">NULL</span> ? className : <span class="string">""</span>);</span><br><span class="line">    jclass startClass = env-&gt;FindClass(slashClassName);</span><br><span class="line">  ...</span><br><span class="line">  strArray = env-&gt;NewObjectArray(options.size() + <span class="number">1</span>, stringClass, <span class="literal">NULL</span>);</span><br><span class="line">    ...</span><br><span class="line">    jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class="string">"main"</span>, <span class="string">"([Ljava/lang/String;)V"</span>);</span><br><span class="line">    ...</span><br><span class="line">    env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>走这个方法的目的是从c++的世界转入Java的世界。</p><ol><li>初始化JNI</li></ol><ol start="2"><li>创建并开启一个虚拟机实例</li></ol><ol start="3"><li>给这个虚拟机注册JNI方法</li></ol><ol start="4"><li>各种解析之后，调用env-&gt;CallStaticVoidMethod方法，从而调起Java的方法，传入的三个参数分别是要调用的Java类、要调用的方法、传给方法的参数，这里要调用的Java类正是从上一步传进来ZygoteInit类的全称解析出来的，而startMeth参数是main方法，所以这里调用起来的是ZygoteInit的main方法。</li></ol><pre><code>**宣布进入Java的世界！**</code></pre><hr><h3 id="Step3-ZygoteInit-main"><a href="#Step3-ZygoteInit-main" class="headerlink" title="Step3: ZygoteInit.main"></a>Step3: ZygoteInit.main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">    ZygoteServer zygoteServer = <span class="keyword">new</span> ZygoteServer();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">boolean</span> startSystemServer = <span class="keyword">false</span>;</span><br><span class="line">    String socketName = <span class="string">"zygote"</span>;</span><br><span class="line">    String abiList = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> enableLazyPreload = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; argv.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"start-system-server"</span>.equals(argv[i])) &#123;</span><br><span class="line">            startSystemServer = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"--enable-lazy-preload"</span>.equals(argv[i])) &#123;</span><br><span class="line">            enableLazyPreload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(ABI_LIST_ARG)) &#123;</span><br><span class="line">            abiList = argv[i].substring(ABI_LIST_ARG.length());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(SOCKET_NAME_ARG)) &#123;</span><br><span class="line">            socketName = argv[i].substring(SOCKET_NAME_ARG.length());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unknown command line argument: "</span> + argv[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    zygoteServer.registerServerSocketFromEnv(socketName);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">        Runnable r = forkSystemServer(abiList, socketName, zygoteServer);</span><br><span class="line">        <span class="comment">// &#123;@code r == null&#125; in the parent (zygote) process, and &#123;@code r != null&#125; in the</span></span><br><span class="line">        <span class="comment">// child (system_server) process.</span></span><br><span class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">            r.run();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    caller = zygoteServer.runSelectLoop(abiList);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (caller != <span class="keyword">null</span>) &#123;</span><br><span class="line">        caller.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建ZygoteServer，然后做各种标记位的判断，比如startSystemServer判断是否要启动System进程，这里为true。</li></ol><ol start="2"><li>调用zygoteServer.registerServerSocketFromEnv (详见Step3.1)，创建一个Server端Socket，用来等待AMS请求，以创建应用程序进程。但这时候只是创建，还没开始等待。</li></ol><ol start="3"><li>forkSystemServer (详见Step3.2) 创建一个新的子进程，这个新的子进程就是System进程，这里讨论的是Zygote的创建，这个方法会返回null，具体原因见Step3.2</li></ol><ol start="4"><li>调用runSelectLoop方法，在这个方法中无限等待请求。</li></ol><h4 id="Step3-1-ZygoteServer-registerServerSocketFromEnv"><a href="#Step3-1-ZygoteServer-registerServerSocketFromEnv" class="headerlink" title="Step3.1: ZygoteServer.registerServerSocketFromEnv"></a>Step3.1: ZygoteServer.registerServerSocketFromEnv</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerServerSocketFromEnv</span><span class="params">(String socketName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mServerSocket == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> fileDesc;</span><br><span class="line">        ...</span><br><span class="line">        String env = System.getenv(fullSocketName);</span><br><span class="line">        fileDesc = Integer.parseInt(env);</span><br><span class="line">        ...</span><br><span class="line">        FileDescriptor fd = <span class="keyword">new</span> FileDescriptor();</span><br><span class="line">        ...</span><br><span class="line">        mServerSocket = <span class="keyword">new</span> LocalServerSocket(fd);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是Step3的第2步，创建并注册Socket。</p><p>通过socket的名字创建文件操作符，然后再通过文件操作符创建一个socket，其实这个socket在操作系统中的表现形式就是一个文件（这是关于Linux系统的知识，这里不详述）这个socket就存在成员变量mServerSocket中。</p><h4 id="Step3-2-ZygoteInit-forkSystemServer"><a href="#Step3-2-ZygoteInit-forkSystemServer" class="headerlink" title="Step3.2: ZygoteInit.forkSystemServer"></a>Step3.2: ZygoteInit.forkSystemServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Runnable <span class="title">forkSystemServer</span><span class="params">(String abiList, String socketName,</span></span></span><br><span class="line"><span class="function"><span class="params">            ZygoteServer zygoteServer)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        String args[] = &#123;</span><br><span class="line">            <span class="string">"--setuid=1000"</span>,</span><br><span class="line">            <span class="string">"--setgid=1000"</span>,</span><br><span class="line">            <span class="string">"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,1024,1032,1065,3001,3002,3003,3006,3007,3009,3010"</span>,</span><br><span class="line">            <span class="string">"--capabilities="</span> + capabilities + <span class="string">","</span> + capabilities,</span><br><span class="line">            <span class="string">"--nice-name=system_server"</span>,</span><br><span class="line">            <span class="string">"--runtime-args"</span>,</span><br><span class="line">            <span class="string">"--target-sdk-version="</span> + VMRuntime.SDK_VERSION_CUR_DEVELOPMENT,</span><br><span class="line">            <span class="string">"com.android.server.SystemServer"</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        ...</span><br><span class="line">        pid = Zygote.forkSystemServer(</span><br><span class="line">                    parsedArgs.uid, parsedArgs.gid,</span><br><span class="line">                    parsedArgs.gids,</span><br><span class="line">                    parsedArgs.runtimeFlags,</span><br><span class="line">                    <span class="keyword">null</span>,</span><br><span class="line">                    parsedArgs.permittedCapabilities,</span><br><span class="line">                    parsedArgs.effectiveCapabilities);</span><br><span class="line">                    </span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">/* For child process */</span></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</span><br><span class="line">                waitForSecondaryZygote(socketName);</span><br><span class="line">            &#125;</span><br><span class="line">            zygoteServer.closeServerSocket();</span><br><span class="line">            <span class="keyword">return</span> handleSystemServerProcess(parsedArgs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是Step3的第2步，它的目的是创建System进程</p><ol><li>首先是置顶了一些参数，这些参数主要是针对即将创建的子进程，即System进程的，可以看到这里为System进程设定了其UID、GID等等信息，而且指定了它的执行类是com.android.server.SystemServer。</li></ol><ol start="2"><li>调用Zygote.forkSystemServer方法，这个方法会调用操作系统提供的fork方法，fork方法是Linux系统中创建一个新进程的方式，是一个非常特殊的方法，父进程执行fork方法之后，会出现两个几乎完全一样的进程，即原先的父进程和新建的子进程，同时返回fork方法，而且继续执行的代码是一致的，但是不同的是，fork的返回值不相同。在父进程中，会返回子进程的pid（ProcessID），而子进程中会返回0。</li></ol><ol start="3"><li>然后看接下来的代码，if语句判断pid是否为0，所以if语句块中的代码是子进程会执行的，而对于父进程，pid不为零，所以下面会返回null，这也就解释了Step3中为什么是返回null。读者看到这里可以重新返回去看看step3就会明白。（这种写法是非常典型的fork子进程之后的写法）</li></ol><ol start="4"><li>这里重新理一理Step3最后的步骤，在父进程，也就是Zygote进程中，forkSystemServer方法返回了null，于是会执行runSelectLoop方法，而子进程，也就是System进程，返回的是一个runnable，是由forkSystemServer方法中调用的handleSystemServerProcess方法返回的，它嵌套返回到main方法中后，会执行run方法，然后main方法就返回掉了，因为这是System进程了。</li></ol><h4 id="Step3-3-ZygoteServer-runSelectLoop"><a href="#Step3-3-ZygoteServer-runSelectLoop" class="headerlink" title="Step3.3: ZygoteServer.runSelectLoop"></a>Step3.3: ZygoteServer.runSelectLoop</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Runnable <span class="title">runSelectLoop</span><span class="params">(String abiList)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;FileDescriptor&gt; fds = <span class="keyword">new</span> ArrayList&lt;FileDescriptor&gt;();</span><br><span class="line">    ArrayList&lt;ZygoteConnection&gt; peers = <span class="keyword">new</span> ArrayList&lt;ZygoteConnection&gt;();</span><br><span class="line">  </span><br><span class="line">    fds.add(mServerSocket.getFileDescriptor());</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        StructPollfd[] pollFds = <span class="keyword">new</span> StructPollfd[fds.size()];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pollFds.length; ++i) &#123;</span><br><span class="line">            pollFds[i] = <span class="keyword">new</span> StructPollfd();</span><br><span class="line">            pollFds[i].fd = fds.get(i);</span><br><span class="line">            pollFds[i].events = (<span class="keyword">short</span>) POLLIN;</span><br><span class="line">        &#125;</span><br><span class="line">      ...</span><br><span class="line">        Os.poll(pollFds, -<span class="number">1</span>);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pollFds.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((pollFds[i].revents &amp; POLLIN) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                ZygoteConnection newPeer = acceptCommandPeer(abiList);</span><br><span class="line">                peers.add(newPeer);</span><br><span class="line">                fds.add(newPeer.getFileDesciptor());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ZygoteConnection connection = peers.get(i);</span><br><span class="line">                    <span class="keyword">final</span> Runnable command = connection.processOneCommand(<span class="keyword">this</span>);</span><br><span class="line">                    <span class="keyword">if</span> (mIsForkChild) &#123;</span><br><span class="line">                        <span class="comment">// We're in the child. We should always have a command to run at this</span></span><br><span class="line">                        <span class="comment">// stage if processOneCommand hasn't called "exec".</span></span><br><span class="line">                        <span class="keyword">if</span> (command == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"command == null"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> command;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// We're in the server - we should never have any commands to run.</span></span><br><span class="line">                        <span class="keyword">if</span> (command != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"command != null"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// We don't know whether the remote side of the socket was closed or</span></span><br><span class="line">                        <span class="comment">// not until we attempt to read from it from processOneCommand. This shows up as</span></span><br><span class="line">                        <span class="comment">// a regular POLLIN event in our regular processing loop.</span></span><br><span class="line">                        <span class="keyword">if</span> (connection.isClosedByPeer()) &#123;</span><br><span class="line">                            connection.closeSocket();</span><br><span class="line">                            peers.remove(i);</span><br><span class="line">                            fds.remove(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面说到这里是Zygote进程死循环等待的地方，是Zygote进程fork出System进程之后，自己等待别的请求的地方。</p><ol><li>首先声明了两个数组，一个是文件描述符数组，第一个元素放的就是mServerSocket。另一个数组是ZygoteConnection数组，从类名就能猜出（当然事实也确实是这样滴）这个类描述的是一个和Zygote进程的连接，也就是说当Zygote接收到请求之后，会将它封装成一个ZygoteConnection对象。</li></ol><ol start="2"><li>开个死循环，调用方法Os.poll，处理轮询状态。poll也是Linux提供的系统调用，用于获知指定的Socket是否有事件到达。可以看到这里创建了一个StructPollfd数组，StructPollfd类是专门与Poll调用配合的一个类，用来描述poll调用的目的和结果，它既包含了一个描述poll监听目的的成员变量，也包含了一个描述已发生事件的成员变量。Poll调用根据传入的StructPollfd，指定监听的socket，指定监听的事件类型，如果没有事件到达，会阻塞在poll方法中，如果有事件到达，则将发生的事件写入StructPollfd对象中，然后返回。</li></ol><ol start="3"><li>可以看到，一开始装入的pollfd是mServerSocket，然后进入poll调用，一旦有事件到达，poll方法将跳出，进入下面的for循环，这时如果i=0，就是AMS请求与Zygote连接（注意这里并非请求创建进程），则将请求包装后，放入peers中。等到AMS再次请求创建时，取出peers中对应的连接，处理、调用processOneCommand方法。（AMS每次启动的时候都是先openZygotexxx，然后再sendArgs，其实发送了两次请求，一次请求连接，一次请求创建）</li></ol><ol start="4"><li>往下又是一个非常典型的fork之后的写法，如果是子进程，就把processOneCommand的结果，即一个Runnable返回出去，在前面提到的ZygoteInit的main方法中会调用它run。父进程将已经处理过的ZygoteConnection从peers中移出，继续等待事件。</li></ol><h4 id="Step3-4：ZygoteConnection-processOneCommand"><a href="#Step3-4：ZygoteConnection-processOneCommand" class="headerlink" title="Step3.4：ZygoteConnection.processOneCommand"></a>Step3.4：ZygoteConnection.processOneCommand</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Runnable <span class="title">processOneCommand</span><span class="params">(ZygoteServer zygoteServer)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//从socket中读出要创建的进程的参数</span></span><br><span class="line">args = readArgumentList();</span><br><span class="line">...</span><br><span class="line">parsedArgs = <span class="keyword">new</span> Arguments(args);</span><br><span class="line">...</span><br><span class="line">pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,</span><br><span class="line">            parsedArgs.runtimeFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo,</span><br><span class="line">            parsedArgs.niceName, fdsToClose, fdsToIgnore, parsedArgs.startChildZygote,</span><br><span class="line">            parsedArgs.instructionSet, parsedArgs.appDataDir);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 子进程</span></span><br><span class="line">            zygoteServer.setForkChild();</span><br><span class="line">            <span class="comment">// 子进程中要关掉ServerSocket</span></span><br><span class="line">            zygoteServer.closeServerSocket();</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> handleChildProc(parsedArgs, descriptors, childPipeFd,</span><br><span class="line">                    parsedArgs.startChildZygote);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 父进程，即Zygote</span></span><br><span class="line">            handleParentProc(pid, descriptors, serverPipeFd);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法要处理创建进程的请求，在这里会fork出子进程了。</p><ol><li>首先从mServerSocket中读出AMS放进去的请求参数，并封装一下</li></ol><ol start="2"><li>调用Zygote.forkAndSpecialize方法fork出子进程</li></ol><ol start="3"><li>父进程和子进程分开处理。这个地方涉及到的主要是应用程序进程的启动过程，这里不想详述。</li></ol><p><strong><em>到这里Zygote就启动完成啦，在死循环里面等着。</em></strong></p><hr><h2 id="System启动"><a href="#System启动" class="headerlink" title="System启动"></a>System启动</h2><h3 id="Step1-ZygoteInit-handleSystemServerProcess"><a href="#Step1-ZygoteInit-handleSystemServerProcess" class="headerlink" title="Step1: ZygoteInit.handleSystemServerProcess"></a>Step1: ZygoteInit.handleSystemServerProcess</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Runnable <span class="title">handleSystemServerProcess</span><span class="params">(ZygoteConnection.Arguments parsedArgs)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (parsedArgs.invokeWith != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ClassLoader cl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (systemServerClasspath != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cl = createPathClassLoader(systemServerClasspath, parsedArgs.targetSdkVersion);</span><br><span class="line">                Thread.currentThread().setContextClassLoader(cl);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Pass the remaining arguments to SystemServer.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="keyword">return</span> ZygoteInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>这个方法在ZygoteInit里调用的，前面有说到。而且它的调用顺序是在Zygote的死循环开始之前的。</li></ol><ol start="2"><li>它的参数是前面设置好的一个参数，而且是指向子进程的，也就是system进程。其中invokeWith是没有设置的，应该是为了检测进程内存泄露等等Debug用途时才会有值，这一点如果有大大知道，望指点一二。</li></ol><ol start="3"><li>接下来调用ZygoteInit.zygoteInit</li></ol><hr><h3 id="Step2-ZygoteInit-zygoteInit"><a href="#Step2-ZygoteInit-zygoteInit" class="headerlink" title="Step2: ZygoteInit.zygoteInit"></a>Step2: ZygoteInit.zygoteInit</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Runnable <span class="title">zygoteInit</span><span class="params">(<span class="keyword">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    ZygoteInit.nativeZygoteInit();</span><br><span class="line">    <span class="keyword">return</span> RuntimeInit.applicationInit(targetSdkVersion, argv, classLoader);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>nativeZygoteInit在System进程中启动了一个Binder线程池。这里不详述，关于Binder的知识后面会写文章。</li></ol><ol start="2"><li>调用了RuntimeInit.applicationInit</li></ol><hr><h3 id="Step3-RuntimeInit-applicationInit"><a href="#Step3-RuntimeInit-applicationInit" class="headerlink" title="Step3: RuntimeInit.applicationInit"></a>Step3: RuntimeInit.applicationInit</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Runnable <span class="title">applicationInit</span><span class="params">(<span class="keyword">int</span> targetSdkVersion, String[] argv,</span></span></span><br><span class="line"><span class="function"><span class="params">            ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> findStaticMain(args.startClass, args.startArgs, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续调用findStaticMain</p><hr><h3 id="Step4-RuntimeInit-findStaticMain"><a href="#Step4-RuntimeInit-findStaticMain" class="headerlink" title="Step4: RuntimeInit.findStaticMain"></a>Step4: RuntimeInit.findStaticMain</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Runnable <span class="title">findStaticMain</span><span class="params">(String className, String[] argv,</span></span></span><br><span class="line"><span class="function"><span class="params">            ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; cl;</span><br><span class="line">    ...</span><br><span class="line">    cl = Class.forName(className, <span class="keyword">true</span>, classLoader);</span><br><span class="line">    ...</span><br><span class="line">    Method m;</span><br><span class="line">    ...</span><br><span class="line">    m = cl.getMethod(<span class="string">"main"</span>, <span class="keyword">new</span> Class[] &#123; String[].class &#125;);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MethodAndArgsCaller(m, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了className指向的类的main方法，也就是SystemServer类的main方法。包装了一下返回了一个MethodAndArgsCaller对象，这个类实现了Runnable接口，于是这个对象会一直返回一直返回到ZygoteInit方法中。</p><p>值得注意的是，这里返回到ZygoteInit.main方法中的进程，不是前面的Zygote进程，而是System进程，是由Zygote进程fork出来的。我们重新看看main方法中的那一段代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Runnable r = forkSystemServer(abiList, socketName, zygoteServer);</span><br><span class="line"><span class="comment">// &#123;@code r == null&#125; in the parent (zygote) process, and &#123;@code r != null&#125; in the</span></span><br><span class="line"><span class="comment">// child (system_server) process.</span></span><br><span class="line"><span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">    r.run();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回出来的对象就是r，然后调用了r的run方法，然后把ZygoteInit的main方法返回掉，于是接下来就是SystemServer.main。</p><hr><h3 id="SystemServer-main"><a href="#SystemServer-main" class="headerlink" title="SystemServer.main"></a>SystemServer.main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> SystemServer().run();</span><br></pre></td></tr></table></figure><p>就调用了这么个方法</p><hr><h3 id="SystemServer-run"><a href="#SystemServer-run" class="headerlink" title="SystemServer.run"></a>SystemServer.run</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        String timezoneProperty =  SystemProperties.get(<span class="string">"persist.sys.timezone"</span>);</span><br><span class="line">        <span class="keyword">if</span> (timezoneProperty == <span class="keyword">null</span> || timezoneProperty.isEmpty()) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Timezone not set; setting to GMT."</span>);</span><br><span class="line">            SystemProperties.set(<span class="string">"persist.sys.timezone"</span>, <span class="string">"GMT"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!SystemProperties.get(<span class="string">"persist.sys.language"</span>).isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">final</span> String languageTag = Locale.getDefault().toLanguageTag();</span><br><span class="line">            SystemProperties.set(<span class="string">"persist.sys.locale"</span>, languageTag);</span><br><span class="line">            SystemProperties.set(<span class="string">"persist.sys.language"</span>, <span class="string">""</span>);</span><br><span class="line">            SystemProperties.set(<span class="string">"persist.sys.country"</span>, <span class="string">""</span>);</span><br><span class="line">            SystemProperties.set(<span class="string">"persist.sys.localevar"</span>, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Initialize the system context.</span></span><br><span class="line">        createSystemContext();</span><br><span class="line">        <span class="comment">// Create the system service manager.</span></span><br><span class="line">        mSystemServiceManager = <span class="keyword">new</span> SystemServiceManager(mSystemContext</span><br><span class="line">        ...</span><br><span class="line">        SystemServerInitThreadPool.get();</span><br><span class="line">        );</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            traceEnd();  <span class="comment">// InitBeforeStartServices</span></span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Start services.</span></span><br><span class="line">    startBootstrapServices();</span><br><span class="line">    startCoreServices();</span><br><span class="line">    startOtherServices();</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Loop forever.</span></span><br><span class="line">    Looper.loop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是真正运行System进程要初始化的工作的地方！！！</p><ol><li>先设置了一些时区、语言等等</li></ol><ol start="2"><li>创建了一个消息循环Looper</li></ol><ol start="3"><li>创建系统上下文、创建SystemServiceManager,创建一个线程池用来维护系统服务。</li></ol><ol start="4"><li><p>调用各个方法启动各种系统服务，关于系统服务。</p><ul><li><p>startBootstrapServices：这里启动一些依赖性比较强的服务。如安装器、设备标识服务、AMS、PackageManagerServices、UserManagerService、电池管理服务、Recovery服务、亮度服务、传感器等等等等。</p></li><li><p>startCoreServices：这里启动了UsageStatsService（用户使用情况服务）、WebViewUpdate服务</p></li><li><p>startOtherServices：一些杂七杂八的服务，比如闹钟、蓝牙、网络（包括wifi）、媒体、存储等等甚至是statusBar也是单开一个服务的，还有一个重要的是WindowymanagerServices，他在这里的原因是它要等到传感器都初始化好之后，它才能启动，这里顺便一提，还给AMS设置了一个回调systemReady，告诉AMS可以运行非系统的代码了。以及NotificationManager也是在这里创建的。</p></li></ul></li></ol><ol start="5"><li>启动Looper</li></ol><p><strong>到这里System进程就启动完成啦。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android系统 </tag>
            
            <tag> Zygote </tag>
            
            <tag> System </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>四火的置顶</title>
      <link href="/2018/10/19/%E5%9B%9B%E7%81%AB%E7%9A%84%E7%BD%AE%E9%A1%B6/"/>
      <url>/2018/10/19/%E5%9B%9B%E7%81%AB%E7%9A%84%E7%BD%AE%E9%A1%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="四火的置顶"><a href="#四火的置顶" class="headerlink" title="四火的置顶"></a>四火的置顶</h1><p>我叫陈钊燚，是华中科技大学软件学院的一名小学生，也是华中科技大学软件学院科创团队和启明学院联创团队Android组的一名小学生。现在主要做一些安卓开发、研究的事情。从大学入学就有开博客的想法，只是困于一开始水平不高，不敢丢人现眼，于是努力学习，这些天有了一些小想法和小总结，感觉有必要正式地记录下来，于是开了这个博客。</p><hr><h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><ul><li>Android开发记录</li><li>Android源码学习：主要以最新的API28为分析对象，如有不同版本，会在博文开头说明。</li><li>计算机知识记录，包括一些课程中、自学中的感受。</li><li>其他杂七杂八</li></ul><hr><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>此博客主要用于学习交流使用，不涉及任何政治、商业内容，文章总会借鉴一些前辈大佬，但绝不是照抄照搬，记录的都是个人的学习感受。但如果有原作者认为本人有侵犯版权的行为，请发邮件通知我，一定按理处理。</p><p>还有，感谢Android届的几位大大们，特别是罗升阳大大、gityuan大大、郭霖大大，我正是从他们的书和博客中窥探到了Android世界的一二分，特别感谢。</p><p><strong>And 小学生谢谢点开博客的各位，欢迎所有人的评价、建议以及批评。共勉</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 置顶 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>跳出小世界</title>
      <link href="/2018/10/19/%E8%B7%B3%E5%87%BA%E5%B0%8F%E4%B8%96%E7%95%8C/"/>
      <url>/2018/10/19/%E8%B7%B3%E5%87%BA%E5%B0%8F%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="VPS梯子架设教程"><a href="#VPS梯子架设教程" class="headerlink" title="VPS梯子架设教程"></a>VPS梯子架设教程</h1><p>程序员入门必修课，番羽土啬hhhh。这篇教程教你从0搭梯子</p><p>需要用到的工具和平台有：<del>钱</del>、VPS主机、shadowsocks</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><hr><p>简单讲讲关于墙的原理。我们进行网络访问时，将域名，比如<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 通过一层层发向更高级的主机，进行解析成为IP地址（类似127.0.0.1这样的格式），再根据IP发送到真正需要发送的服务器，由服务器返回你需要的数据。</p><p>而提供上层网络服务的节点（ISP）是可以控制的，在CN范围内的网络，都受到GFW的控制，GFW是The Great Fire Wall of China的简写，意指“中国网络防火墙”(字面意为“中国防火长城”)，这是对“国家公共网络监控系统”的俗称，国内简称“国家防火墙”。是用于抵御国外非法、不健康、不合时宜的网站的网络审查机制。境外网站（包括国内的人在境外租用空间开设的网站）一旦被列入黑名单，中国大陆任何地方均不能访问到它。 </p><p>比如google、youtube这样的网站，便是列于GFW的黑名单之中，GFW使用了多种技术对网络请求进行监听和拦截，比如关键字过滤、IP地址封锁、DNS劫持污染等等。这些技术的原理这里就不再详述，简而言之，如果一个请求的目标在黑名单之中，那么这个请求将会被拦截、阻断。</p><p>而想要访问黑名单中的网络，就必须绕开GFW，shadowsocks就是这样一个工具。它对网络请求的发送进行加密，使得数据经过GFW时，无法识别数据的内容，那么GFW会放过这个数据。但有个问题，就是请求是发送出去了，可是返回呢？直接返回的数据还是会被 GFW拦截，所以需要一个部署在国外网站的服务器，它可以直接访问国外网站，我们不是直接请求，而是将请求发送到该服务器，由它代转发这次请求，并将返回的数据由shadowsocks服务端进行加密后，再返回，这样就实现了绕过GFW的目的。</p><p>而还有一种现在没有被GFW墙掉的情况，就是你的网络支持ipv6访问。我们所熟悉的IP地址，多是类似127.0.0.1这样的格式，这种格式是ipv4协议指定的，而在网络高速发展的今天，ipv4地址的总数量出现了不够用的趋势，于是ipv6出现了，ipv6的格式类似ABCD:EF01:2345:6789:ABCD:EF01:2345:6789，而且使用了与ipv4不同的转发技术，而目前GFW还没能对使用ipv6访问的请求进行拦截。所以如果你的网络和主机都支持ipv6，那么你可以直接访问到google。但ipv6目前普及程度不高，主要在国内某些高校的校园网中有应用（例如hust的宿舍区嘻嘻嘻</p><h2 id="VPS服务器"><a href="#VPS服务器" class="headerlink" title="VPS服务器"></a>VPS服务器</h2><p>部署shadowsocks的服务器需要连接在没有墙的国外网络中，这里几个推荐：搬瓦工、vultr。这两个是我个人用过的服务器，体验良好，连接稳定。价格的话，搬瓦工最便宜的价格是一年19.99刀，而vultr最便宜的有一个月2.5刀，但是这个服务是ipv6 only，就是只有ipv6能访问这个主机（我们就是为了能访问国外网站，有ipv6我还要你何用）所以最便宜能用的为一个月3.5刀。</p><p>​    图看这里。这个是vulr的<br><a href="https://i.loli.net/2018/09/22/5ba6387bb5f52.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/22/5ba6387bb5f52.png" alt=""></a><br>这个是搬瓦工的。<br><a href="https://i.loli.net/2018/09/22/5ba6389c78ca8.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/22/5ba6389c78ca8.png" alt=""></a><br>我们可以观察以下，对两个最便宜的套餐，vultr稍贵一点，但它的硬盘容量是20G，这点如果对于只想使用shadowsocks的大噶其实不重要，但是如果你还想在这台服务器上部署网站，如个人博客之类的，那硬盘容量还是比较重要的。所以看个人需（qian）求（bao）啦。</p><p>购买服务器的时候需要选择操作系统，对于操作系统选择，这里我提个建议，不用选择最新的发布版本。因为网上对于各种坑的教程，对于新版本往往没那么齐全，很多在新版本中才会出现的坑经常查不到，这会耗费很多不必要的时间。个人建议可以选用centOS 6。我这里也是使用这个版本做例子。</p><hr><h2 id="服务端部署"><a href="#服务端部署" class="headerlink" title="服务端部署"></a>服务端部署</h2><p>好了我们有了一个服务器了，接下来要进行shadowsocks服务端的部署了。首先要连上服务器。这里我们使用的软件叫xshell（<a href="https://xshell.en.softonic.com/" target="_blank" rel="noopener">https://xshell.en.softonic.com/</a> ）安装都按默认即可。打开xshell</p><ul><li><p>这里是我的两个服务器。新安装时应该时没有的。点击“新建”<br><a href="https://i.loli.net/2018/09/22/5ba63e999894f.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/22/5ba63e999894f.png" alt=""></a></p></li><li><p>注意画出来的这几个地方，都是需要填写的。首先是主机和端口号。打开你购买的主机的网站（这里我用搬瓦工做例子）登录后点击Services下的my service，再点击KiwiVM Control Panel<br><a href="https://i.loli.net/2018/09/22/5ba63eba300f9.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/22/5ba63eba300f9.png" alt=""></a></p></li><li><p>第一次点进来似乎会有初始化界面（当时没留图，不记得了），可以查看到你的密码和端口，这时候就可以记下来，后面会用。</p></li><li><p>在这个页面可以管理控制你的服务器。在这里可以看到你的服务器的信息，可以开关服务器，可以为你的服务器改变系统（点击stop，再左侧Install new OS，选择并确定，稍等几分钟就可以更换你的系统）<br><a href="https://i.loli.net/2018/09/22/5ba63ede4f038.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/22/5ba63ede4f038.png" alt=""></a></p></li><li><p>可以观察到，这是我的主机，右侧的IP address就是你的IP，SSH Port是你的端口号，把这两个号填入xshell的新建页面中。点击连接。弹出来用户名页面，填入root点击确定（Linux默认root用户是超级用户）<br><a href="https://i.loli.net/2018/09/22/5ba63eff0c81b.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/22/5ba63eff0c81b.png" alt=""></a></p></li></ul><p><a href="https://i.loli.net/2018/09/22/5ba63f44bdb81.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/22/5ba63f44bdb81.png" alt=""></a></p><ul><li>密码？如果初始化的时候有记下来的，可以直接填入，如果没有的，先在Main controls中点击stop，然后点击左侧Root password modification，点击Generate，就可以重置你的密码，它会弹出来一个密码，是一串很蛋疼的序列（在这里不能改，拍个照下来吧）等待主机重启<br><a href="https://i.loli.net/2018/09/22/5ba640202c751.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/22/5ba640202c751.png" alt=""></a></li><li>然后重新打开你的xshell。填入密码登录确定。<br><a href="https://i.loli.net/2018/09/22/5ba640aa1cfb6.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/22/5ba640aa1cfb6.png" alt=""></a></li><li><p>弹出来这样的字符就说明正确了。这就已经连接上你的服务器了。<br>接下来敲入命令并回车</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure></li><li><p>再输入你自己的新密码并确认一遍密码，之后你的root用户的密码就是这个啦。如果有遗忘了的，可以重新去页面那边重置。</p></li><li>下面要干的事就是安装pip,这是一个Python的包管理工具，我们通过它来下载安装shadowsocks。<br>输入命令</li></ul><p><strong>顺便提示一下，xshell也是可以复制粘贴命令进去的，不过不能用crtl+c/v的方法，而是shift+insert或者鼠标右键点击也可以。</strong></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install python-pip</span><br></pre></td></tr></table></figure><p>这里说另一个安装方法，也可以一试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;</span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure></p><ul><li><p>接下来更新pip源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure></li><li><p>然后安装依赖模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python-setuptools m2crypto supervisor</span><br></pre></td></tr></table></figure></li></ul><p>此时如果出现ImportError: cannot import name main的错误，就先用reboot命令重启下机器，之后再重新执行<figure class="highlight plain"><figcaption><span>install setuptools```。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ 安装shadowsocks</span><br></pre></td></tr></table></figure></p><p>pip install shadowsocks<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ 编辑配置文件</span><br></pre></td></tr></table></figure></p><p>vim /etc/shadowsocks.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 如果提示vim命令not found之类的，先```yum install vim```，然后再继续输入上面的命令。</span><br><span class="line">vim的使用这里简单说一下，vim的用法很多，这里只说明够用的。</span><br></pre></td></tr></table></figure></p><p>每次进入时是命令模式，此时是无法输入的，按a或i进入编辑模式<br>编辑内容后，按ESC键返回命令模式<br>在命令模式下输入引号“：”可以看到下方会打出一个引号<br>输入wq后按回车键保存并退出，如果不想保存，可以直接输入q!后按回车键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br></pre></td></tr></table></figure></p><p>{<br>    “server”:”服务器ip”,<br>    “server_port”:自己指定一个端口号,<br>    “local_address”: “127.0.0.1”,<br>    “local_port”:1080,<br>    “password”:”自己指定一个密码”,<br>    “timeout”:300,<br>    “method”:”aes-256-cfb”<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">温馨提示，一定要注意有没有双引号和逗号！！！</span><br><span class="line">或者如果你想要开通多个用户的话，也可以这么输入</span><br></pre></td></tr></table></figure></p><p>{<br>    “server”:”服务器ip”,<br>    “local_address”:”127.0.0.1”,<br>    “local_port”:1080,<br>    “port_password”:{<br>        “端口1”:”password0”,<br>        “端口2”:”password1”,<br>        “端口3”:”password2”<br>    },<br>    “timeout”:300,<br>    “method”:”aes-256-cfb”<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按ESC : wq 回车 保存</span><br><span class="line">+ 赋予配置文件执行的权限</span><br></pre></td></tr></table></figure></p><p>chmod 755 /etc/shadowsocks.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ 运行shadowsocks服务</span><br></pre></td></tr></table></figure></p><p>ssserver -c /etc/shadowsocks.json -d start<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ 配置开机自启</span><br><span class="line">    + 先查一查ssserver在哪里</span><br></pre></td></tr></table></figure></p><pre><code>whereis ssserver<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果上面的安装都是正确的，会出现ssserver所在的路径</span><br><span class="line">[![](https://i.loli.net/2018/09/23/5ba70494069d1.png)](https://i.loli.net/2018/09/23/5ba70494069d1.png)</span><br><span class="line">+ 接下来实现开机自启</span><br></pre></td></tr></table></figure>vim /etc/rc.local<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在文件末尾添加</span><br></pre></td></tr></table></figure>/usr/bin/ssserver -c /etc/shadowsocks.json -d start#ssserver路径换成你自己的路径```保存退出</code></pre><p>到这里我们就已经完成了服务端的配置的啦。接下来是客户端。</p><hr><h2 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h2><h4 id="Windows版本"><a href="#Windows版本" class="headerlink" title="Windows版本"></a>Windows版本</h4><ul><li>打开Github，搜索shadowsocks-windows,点击打开shadowsocks/shadowsocks-windows<br><a href="https://i.loli.net/2018/09/23/5ba705ca42a30.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/23/5ba705ca42a30.png" alt=""></a></li><li>点击releases，就是我这里显示的40 releases那个地方<br><a href="https://i.loli.net/2018/09/23/5ba7060c3b23f.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/23/5ba7060c3b23f.png" alt=""></a><br>这里会有很多版本，选择其中一个的.zip下载，解压缩即可使用，如果你发现下载的这个版本不能用，有可能是兼容的问题，换一个版本试试</li><li>打开shadowsocks，在这里输入服务器地址、服务器端口、密码、加密方式，这些都是刚刚在服务端配置文件里面配置的。之后点击确定即可。<br><a href="https://i.loli.net/2018/09/23/5ba70692a672f.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/09/23/5ba70692a672f.png" alt=""></a></li><li>测试一下，在浏览器里输入<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 如果成功打开google的话，你就成功啦。<br>客户端这边也有一些可以配置的，windows在右下角可以右键点击那个小飞机，系统代理模式可以更改，PAC模式和全局模式，这个不详述了。<h4 id="Linux版本"><a href="#Linux版本" class="headerlink" title="Linux版本"></a>Linux版本</h4></li><li>一样是在github上搜索shadowsocks，不过要使用shadowsocks-qt5，有一个AppImage，可以使用<h4 id="Android版本"><a href="#Android版本" class="headerlink" title="Android版本"></a>Android版本</h4></li><li>github上搜索，使用shadowsocks-android版本，这个本人亲测有兼容性问题，多试几个版本，找到能兼容你的手机的<h4 id="iOS版本"><a href="#iOS版本" class="headerlink" title="iOS版本"></a>iOS版本</h4></li><li>iOS的shadowsocks在国内区的Appstore找不到，笔者找了特别久，找到两款替代的，SkipWorld和SsrConnection，这两款软件都可以和shadowsocks客户端作用一样。</li></ul><hr><p>网上还有很多关于shadowsocks优化的教程，包括用锐速、BBr等等，这里不想详述，有兴趣可以去找找看。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shadowsocks </tag>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
